
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <220>;
        quick_tap_ms = <150>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };

    // using &hlt instead of &lt. It enables quick tap
    hlt: homerow_layers {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_LAYERS";
        #binding-cells = <2>;
        tapping-term-ms = <220>;
        quick_tap_ms = <150>;
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL       &kp N1       &kp N2        &kp N3      &kp N4       &kp N5            &tog 1                                                                                             &mo 3       &kp N6        &kp N7         &kp N8            &kp N9       &kp N0           &kp MINUS
 &kp TAB         &kp Q        &kp W         &kp E       &kp R        &kp T             &none                                                                                              &none       &kp Y         &kp U          &kp I             &kp O        &kp P            &kp BSLH
 &kp GRAVE       &hm LALT A   &hm LCTRL S   &hm LSHIFT D &hm LGUI F  &kp G             &none  &hlt 2 ESC    &kp LALT                                      &kp LGUI        &hlt 1 ENTER    &none       &kp H         &hm RGUI J     &hm RIGHT_SHIFT K &hm RCTRL L  &hm RALT SEMI    &kp SQT
 &kp LSHFT       &kp Z        &kp X         &kp C       &kp V        &kp B             &none        &none   &kp HOME           &none       &none          &kp PG_UP             &none     &none       &kp N         &kp M          &kp COMMA         &kp DOT      &kp FSLH         &kp RSHFT
     &mo 2   &kp GRAVE     &kp CAPS      &kp LEFT   &kp RIGHT                          &hlt 1 SPACE &kp TAB &kp END                                       &kp PG_DN       &hm LSHIFT DEL  &hlt 2 BSPC               &kp LEFT_BRACKET  &kp RIGHT_BRACKET &kp EQUAL &kp MINUS        &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL           &kp N1      &kp N2                &kp N3                 &kp N4         &kp N5             &trans      &mo 3     &kp N6  &kp KP_NUM   &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB  &kp EXCLAMATION      &kp AT        &kp LEFT_BRACE        &kp RIGHT_BRACE       &kp PIPE              &none      &none   &kp PLUS   &kp KP_N7      &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
   &kp ESC         &kp HASH  &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS      &kp GRAVE              &none  &kp LCTRL   &kp LALT                                  &kp LGUI        &kp ENTER       &none  &kp ASTERISK  &kp KP_N4  &kp KP_N5  &kp KP_N6     &kp EQUAL    &kp SQT
 &kp LSHFT      &kp PERCENT   &kp CARET      &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp AMPERSAND              &none      &none   &kp HOME       &none          &none      &kp PG_UP            &none       &none     &kp MINUS  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2        &kp GRAVE    &kp CAPS              &kp LEFT              &kp RIGHT       &kp BSPC            &kp DEL    &kp END  &kp PG_DN   &kp ENTER  &kp BACKSPACE      &kp KP_N0          &kp DOT  &kp KP_DOT      &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1   &mo 3    &kp F7     &kp F8     &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &kp RC(UP)  &trans  &trans             &none   &none  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END   &trans   &trans
 &trans  &trans  &kp RC(LEFT)  &kp RC(DOWN)  &kp RC(RIGHT)  &trans             &none  &trans    &trans                         &trans   &trans    &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none    &trans      &none      &none   &trans    &none    &none    &trans    &trans  &trans     &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans    &trans     &trans     &trans   &trans   &trans   &trans    &trans    &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

    };
};
